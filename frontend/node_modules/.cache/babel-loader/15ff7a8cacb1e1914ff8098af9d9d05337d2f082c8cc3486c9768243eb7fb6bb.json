{"ast":null,"code":"var _jsxFileName = \"D:\\\\Timer Project\\\\crafting-timer\\\\src\\\\components\\\\ItemGroupList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ItemGroup from './ItemGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemGroupList = ({\n  activeTimers,\n  toggleTimer,\n  getTimeLeft,\n  openCustomTimer\n}) => {\n  _s();\n  const [itemGroups, setItemGroups] = useState({});\n  useEffect(() => {\n    const fetchItems = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/items');\n        const data = await response.json();\n\n        // Your backend already sends grouped data structured like this:\n        // {\n        //   tier1: {\n        //     groupA: [...],\n        //     groupB: [...]\n        //   },\n        //   tier2: {\n        //     groupC: [...]\n        //   }\n        // }\n        // So **no need to reduce or regroup**. Just set it directly:\n\n        setItemGroups(data);\n      } catch (error) {\n        console.error('Error fetching item groups:', error);\n      }\n    };\n    fetchItems();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-groups\",\n    children: Object.entries(itemGroups).map(([tierName, tierData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tier-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"tier-title\",\n        children: tierName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"groups-row\",\n        children: typeof tierData === 'object' && !Array.isArray(tierData) ? Object.entries(tierData).map(([groupName, items]) => /*#__PURE__*/_jsxDEV(ItemGroup, {\n          groupName: groupName,\n          items: items,\n          activeTimers: activeTimers,\n          toggleTimer: toggleTimer,\n          getTimeLeft: getTimeLeft,\n          openCustomTimer: openCustomTimer\n        }, groupName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(ItemGroup, {\n          groupName: tierName,\n          items: tierData,\n          activeTimers: activeTimers,\n          toggleTimer: toggleTimer,\n          getTimeLeft: getTimeLeft,\n          openCustomTimer: openCustomTimer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, tierName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemGroupList, \"YzfzI3+B5x/1OdCjwtnu0+Sw9VI=\");\n_c = ItemGroupList;\nexport default ItemGroupList;\nvar _c;\n$RefreshReg$(_c, \"ItemGroupList\");","map":{"version":3,"names":["React","useEffect","useState","ItemGroup","jsxDEV","_jsxDEV","ItemGroupList","activeTimers","toggleTimer","getTimeLeft","openCustomTimer","_s","itemGroups","setItemGroups","fetchItems","response","fetch","data","json","error","console","className","children","Object","entries","map","tierName","tierData","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","groupName","items","_c","$RefreshReg$"],"sources":["D:/Timer Project/crafting-timer/src/components/ItemGroupList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ItemGroup from './ItemGroup';\r\n\r\nconst ItemGroupList = ({ activeTimers, toggleTimer, getTimeLeft, openCustomTimer }) => {\r\n  const [itemGroups, setItemGroups] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchItems = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/items');\r\n        const data = await response.json();\r\n\r\n        // Your backend already sends grouped data structured like this:\r\n        // {\r\n        //   tier1: {\r\n        //     groupA: [...],\r\n        //     groupB: [...]\r\n        //   },\r\n        //   tier2: {\r\n        //     groupC: [...]\r\n        //   }\r\n        // }\r\n        // So **no need to reduce or regroup**. Just set it directly:\r\n\r\n        setItemGroups(data);\r\n      } catch (error) {\r\n        console.error('Error fetching item groups:', error);\r\n      }\r\n    };\r\n\r\n    fetchItems();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"all-groups\">\r\n      {Object.entries(itemGroups).map(([tierName, tierData]) => (\r\n        <div key={tierName} className=\"tier-section\">\r\n          <h1 className=\"tier-title\">{tierName}</h1>\r\n          <div className=\"groups-row\">\r\n            {typeof tierData === 'object' && !Array.isArray(tierData) ? (\r\n              Object.entries(tierData).map(([groupName, items]) => (\r\n                <ItemGroup\r\n                  key={groupName}\r\n                  groupName={groupName}\r\n                  items={items}\r\n                  activeTimers={activeTimers}\r\n                  toggleTimer={toggleTimer}\r\n                  getTimeLeft={getTimeLeft}\r\n                  openCustomTimer={openCustomTimer}\r\n                />\r\n              ))\r\n            ) : (\r\n              <ItemGroup\r\n                groupName={tierName}\r\n                items={tierData}\r\n                activeTimers={activeTimers}\r\n                toggleTimer={toggleTimer}\r\n                getTimeLeft={getTimeLeft}\r\n                openCustomTimer={openCustomTimer}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemGroupList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEAL,aAAa,CAACI,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKgB,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBC,MAAM,CAACC,OAAO,CAACZ,UAAU,CAAC,CAACa,GAAG,CAAC,CAAC,CAACC,QAAQ,EAAEC,QAAQ,CAAC,kBACnDtB,OAAA;MAAoBgB,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC1CjB,OAAA;QAAIgB,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEI;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1C1B,OAAA;QAAKgB,SAAS,EAAC,YAAY;QAAAC,QAAA,EACxB,OAAOK,QAAQ,KAAK,QAAQ,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,QAAQ,CAAC,GACvDJ,MAAM,CAACC,OAAO,CAACG,QAAQ,CAAC,CAACF,GAAG,CAAC,CAAC,CAACS,SAAS,EAAEC,KAAK,CAAC,kBAC9C9B,OAAA,CAACF,SAAS;UAER+B,SAAS,EAAEA,SAAU;UACrBC,KAAK,EAAEA,KAAM;UACb5B,YAAY,EAAEA,YAAa;UAC3BC,WAAW,EAAEA,WAAY;UACzBC,WAAW,EAAEA,WAAY;UACzBC,eAAe,EAAEA;QAAgB,GAN5BwB,SAAS;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOf,CACF,CAAC,gBAEF1B,OAAA,CAACF,SAAS;UACR+B,SAAS,EAAER,QAAS;UACpBS,KAAK,EAAER,QAAS;UAChBpB,YAAY,EAAEA,YAAa;UAC3BC,WAAW,EAAEA,WAAY;UACzBC,WAAW,EAAEA,WAAY;UACzBC,eAAe,EAAEA;QAAgB;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA,GAzBEL,QAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA0Bb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpB,EAAA,CA/DIL,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAiEnB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}